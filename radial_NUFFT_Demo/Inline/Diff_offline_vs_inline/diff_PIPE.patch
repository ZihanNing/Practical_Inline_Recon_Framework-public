--- /home/zn23/DISORDER/Gadgetron_Framework/compare/radial/radial_NUFFT_recon.m
+++ /home/zn23/DISORDER/Gadgetron_Framework/compare/radial/Inline_NUFFT_radial.m
@@ -1,3 +1,5 @@
+function [arrayimg1_sos] = Inline_NUFFT_radial(PIPE_folder,twix_like)
+
 %===========================================================
 % Main execution script for MERINA sodium MRI k-space to im-
 % age reconstruction. Handles various settings and options, 
@@ -11,22 +13,23 @@
 % anning to include legacy reconstruction for completeness. 
 % Some extensions to come: B1 mapping and correction, B0 map-
 % ping and correction, improved trajectory realignment. 
+%-----------------------------------------------------------
+% This is an inline implementation version PIPE
+% implemented by Zihan Ning (KCL)
 %===========================================================
 
 %% DEPENDENCIES 
-clear
-% addpath('dialog/')
-addpath(genpath('radial_NUFFT_Demo'));
-addpath(genpath('/home/zn23/matlab/finufft')); % ZN: load the finufft path; finufft toolbox need to be installed first
-setPath
+% already handled in the handle_connection_background_nufft_radial.m
 
 %% UI FOR INPUTS
-home_path = getenv('HOME')
-raw_path = [home_path,'/Gadgetron_Parallel_Framework/raw'];
-load([home_path,'/Gadgetron_Parallel_Framework/radial_NUFFT_Demo/Config_NUFFT_radial_MEGE_offline.mat']);
+% the inline implemented pipeline should be completely automatic 
+% therefore the UI has been replaced by a config
+
+% load the config
+load([PIPE_folder,'/Inline/Config_NUFFT_radial_MEGE.mat']);
 
 %% PARSING INPUT %%
-out_dir = settings.out_dir;
+out_dir = twix_like.hdr.save_path; % save the intermediate result in the same folder as raw
 meth_script = settings.meth_script;
 meth_nufft = settings.meth_nufft;
 finufft_dir = settings.finufft_dir;
@@ -60,14 +63,11 @@
 shift_img = settings.shift_img; 
 
 %% DIRECTORY MANAGEMENT %% 
-if not(isfolder([raw_path,'/',out_dir]))
-    mkdir([raw_path,'/',out_dir])
-    disp("Created image output directory")
-else
-    error("Output directory <" + out_dir + "> already exists. Either remove it, or enter a different directory name")
-end
+% has been already handled
+
 
 %% KSPACE TO IMAGE %%
+
 %%% recon of volume image %%% 
 if skip_vol_recon == false
     if shift_img == "Vol" && skip_shift == false
@@ -105,7 +105,7 @@
     end
 else
     disp("Commenced recon of array image")
-    [img_array, res_array, ~, ~, ~] = methods_recon([raw_path,'/',array_raw1_fname],'',Tro,"n","n",[],doshift,shift_noTE,shift,shift_TE1,shift_img,"n",meth_nufft, meth_script);
+    [img_array, res_array, ~, ~, ~] = methods_recon_inline(twix_like,Tro,"n","n",[],doshift,shift_noTE,shift,shift_TE1,shift_img,"n",meth_nufft, meth_script);
     disp("Completed recon of array image")
 end
 
@@ -116,8 +116,11 @@
 
 %% SAVING IMAGES %% 
 res_array = res_array * 1e3; 
-output_path = [raw_path, '/', out_dir];
+output_path = twix_like.hdr.save_path; % uniformly saved the images all together
 disp(['Writing final images as NIFTI file into output path ',output_path]);
 
-tmp_nii = make_nii(fliplr(abs(squeeze(img_array_sos))),[res_array,res_array,res_array]);%,[],[],mat2str(TE*1e3));
+arrayimg1_sos = fliplr(abs(squeeze(img_array_sos)));
+tmp_nii = make_nii(arrayimg1_sos,[res_array,res_array,res_array]);%,[],[],mat2str(TE*1e3));
 save_nii(tmp_nii,[output_path,'/arrayimg1_sos','.nii.gz']);
+
+end

